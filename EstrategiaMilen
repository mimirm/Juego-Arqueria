public class EstrategiaMilen{
    
    private double tiroX, tiroY, tiroXAnterior, tiroYAnterior;
    
    /*
    *   @Funcion: Metodo constructor
    */
    public EstrategiaMilen(){
        tiroXAnterior = 0;
        tiroYAnterior = 0;
    }
    
    /*
    *   @Funcion: Este metodo calcula valores de 'x' y 'y' para el siguiente tiro.
    *             De forma resumida, el primer tiro sera siempre hacia el centro de
    *             la diana. Los demas trataran de encontrar la desviacion causada unicamente
    *             por el nivel de experiencia, si esta es muy baja trata de encontrar la
    *             causada por el viento.
    *   @Param: Utiliza el numero de set en juego, el numero de tiro en juego,
    *           y las coodenadas (x, y) en donde cayo la flecha pasada.
    */
    public void tirar ( int setActual, int tiroActual, double x2, double y2){ 
        if(tiroActual == 1){
            tiroX = 1;
            tiroY = 1;
        }
        else{
            if( x2 ==0 || y2 == 0){
                tiroX = 1;
                tiroY = 1;
            }
            else{
                double eX = x2 - tiroXAnterior;
                double eY = y2 - tiroYAnterior;
                if (eX > -0.05 && eX < 0.05){
                   double desVientoX = ((x2 - tiroXAnterior)*(Math.acos(x2)))/ x2;
                   tiroX = tiroXAnterior - desVientoX;
                }
                else{
                   tiroX = 2*x2 - tiroXAnterior;
                if (eY > -0.05 && eY < 0.05){
                   double desVientoY = ((y2 - tiroYAnterior)*(Math.asin(y2)))/ y2;
                   tiroY = tiroYAnterior - desVientoY;
                }
                else{
                   tiroY = 2*y2 - tiroYAnterior;
                }
            }
        }
        tiroXAnterior = tiroX;
        tiroYAnterior = tiroY;
    }
    
    public double getTiroX(){
        return tiroX;
    }
    
    public double getTiroY(){
        return tiroY;
    }
}
