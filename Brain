public class Brain {
    Interfaz interfaz;
    Juez juez;
    Arcos arco;
    Vientos viento;
    Blanco blanco;
    static int jugadorHumano = 1;
    private boolean salir;

    public Brain(){                //Metodo constructor
        interfaz = new Interfaz();
        juez = new Juez();
        arco = new Arcos();
        blanco = new Blanco();
        salir = false;
    }

    public void run(){
        do{
            int opcion = interfaz.desplegarMenu();
            switch (opcion){
                case 1:
                    iniciarPartida();
                    break;
                case 2:
                    verPuntajeMasAlto();
                    break;
                case 3: 
                    configurarCantDeSets();
                    break;
                case 4:
                    configurarCantDeTirosPorSets();
                    break;
                case 5:
                    salir();
                    break;
    
            }
        }while(!salir);
    }

    public void iniciarPartida(){
        Jugador jugadorHumano = new Jugador(1);
        Jugador jugadorRobot = new Jugador((int)(Math.random()*3)+2);
        double primerJugador = decidirPrimerJugador();
        int cantSets = juez.getSets();
        int cantTiros = juez.getTiros();
        
        if (primerJugador < 0.5){  //Sea [0.0 a 0.5[ el rango para que Usuario vaya primero
           for(int turnos=1; turnos<=cantTiros; turnos ++){
               /*
                * Turno del Humano
                */ 
               //pide que lance
               double x0 = interfaz.pedirCoordenadaX();
               double y0 = interfaz.pedirCoordenadaY();
               //calcula desvio por experiencia
               jugadorHumano.lanzarFlecha( x0 , y0 );
               double x1 = arco.getX1();
               double y1 = arco.getY1();
               //calcula desvio por viento
               generarVientosDelSet();
               viento.desviarFlecha( x1, y1);
               double x2 = viento.getX2();
               double y2 = viento.getY2();
               //guarda donde cae la flecha
               juez.setTiroPrevio(x2, y2);
               //calcula los puntos y los guarda
               double puntosTiro = blanco.calcularPuntos(x2, y2);
               juez.setPuntosDelTiro(puntosTiro);
               //Muestra al usuario resultado del tiro
               mostrarResultadoDelTiro(x2,y2,puntosTiro);
           }
           //Aqui sigue el turno del robot
        }
        else{
        
        }
    }
    
    public void mostrarResultadoDelTiro(double x2, double y2, double puntosTiro){
        String resultadoDelTiro = "La flecha cayo en:( "+x2+", "+y2+"). La puntuacion es:"+puntosTiro;
        interfaz.displayMessage(resultadoDelTiro);
    }
    
    public void generarVientosDelSet(){
        int tipoViento = (int)(Math.random()*3)+1;
          /**
           *  Viento 1 es leve
           *         2 es intermedio
           *         3 es fuerte
           */
        double direccionViento = ((Math.random()*2)+1)*Math.PI;
        //direccionViento = [0,2pi[
        viento.setTipoViento(tipoViento);
        viento.setDireccionViento(direccionViento);
    }
    
    public double decidirPrimerJugador(){
        double primerJugador = (Math.random());
        return primerJugador;
    }

    public void verPuntajeMasAlto(){
        String mensaje = juez.darPuntajeMasAlto();
        interfaz.displayMessage(mensaje);
    }

    public void configurarCantDeSets(){
        int cantSets = interfaz.pedirCantSetsDeseada();
        juez.cambiarSets(cantSets);
    }

    public void configurarCantDeTirosPorSets(){
        int cantTiros = interfaz.pedirCantTirosDeseada();
        juez.cambiarTiros (cantTiros);
    }

    public void salir(){
        salir = true;
    }

}
